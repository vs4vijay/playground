# TODO: Create env vars
# DOMAIN=
# ADMIN_USER=
# ADMIN_EMAIL=
# ADMIN_PASSWORD=
# JWT_CRYPTO_KEY=

services:
  caddy-security:
    image: caddy-security:latest
    # image: caddy-security:2.7.6
    # image: caddy:2.7.6-alpine
    container_name: caddy-security
    restart: unless-stopped
    # command: caddy reverse-proxy --from https://yourdns:443 --to http://wg-easy:51821
    entrypoint: ["/bin/sh","-c"]
    command:
      - |
        echo "[+] Creating Caddyfile"
        tee Caddyfile <<EOF
          {
            order authenticate before respond
            order authorize before reverse_proxy
            
            security {
              local identity store localdb {
                realm local
                
                path /etc/caddy/auth/local/users.json
                # path {$HOME}/.local/caddy/users.json
              }
          
              authentication portal myportal {
                crypto key sign-verify $JWT_CRYPTO_KEY

                enable identity store localdb

                cookie domain $DOMAIN
                # 5 days
                cookie lifetime 432000
                crypto default token lifetime 432000

                ui {
                  meta title "Homelab"
                  meta author "Viz"
                  
                  links {
                      "Identity" "/auth/whoami" icon "las la-user"
                      "Profile" "/auth/profile/" icon "las la-rocket"
                      "Portal" "/auth/portal/" icon "las la-rocket"
                      "Home" "/" icon "las la-sitemap"
                      "Portainer" "/portainer/" icon "las la-cog"
                  }
                }

                transform user {
                  match email $ADMIN_EMAIL
                  action add role authp/admin
                }
              }

              authorization policy admin_policy {
                crypto key sign-verify $JWT_CRYPTO_KEY
                set auth url https://$DOMAIN/auth
                
                # with basic auth portal myportal realm local
                # with api key auth portal myportal realm local

                allow roles authp/admin
              }
            }
          }
        
          $DOMAIN:443 {
            
            route /* {
              respond "root" 200
            }
            
            # route /* {
            #   authorize with admin_policy
            #   reverse_proxy glances:61208
            # }
            
            route /auth* {
              authenticate with myportal

              # /auth/whoami
              # /auth/settings
              # /auth/portal
            }
            
            route /ping* {
              respond "pong" 200
            }
            
            route /hi* {
              authorize with admin_policy

              respond "hello" 200
            }
            
            route /portainer* {
              authorize with admin_policy
              uri strip_prefix /portainer

              reverse_proxy portainer:9000
            }
            
            route /sync* {
              authorize with admin_policy
              uri strip_prefix /sync

              reverse_proxy syncthing:8384
            }
            
            # route /kasm* {
            #   authorize with admin_policy
            #   uri strip_prefix /kasm

            #   reverse_proxy kasm:3000 {
            #     transport http {
            #       tls_insecure_skip_verify
            #     }
            #   }
            # }

            # route /drop* {
            #   # authorize with admin_policy
            #   uri strip_prefix /drop

            #   reverse_proxy pairdrop:3000 {
            #     header_up X-Forwarded-For {remote}
            #   }
            # }

          }

          # ntfy.$DOMAIN:443 {
          #   route /* {
          #     # NO AUTH
          #     # authorize with admin_policy
          #     reverse_proxy ntfy:80
          #   }
          # }

          # rancher.$DOMAIN:443 {
          #   route /* {
          #     authorize with admin_policy
          #     reverse_proxy rancher:80
          #   }
          #   route /test* {
          #     respond "test passed" 200
          #   }
          # }
        EOF
        
        echo "[+] Running Caddy"
        caddy run
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      # - caddy-config:/config
      - caddy-data:/data
      # - caddy-logs:/var/log/caddy
    networks:
      - web
    environment:
      # TODO: Create below env vars
      DOMAIN: ${DOMAIN}
      AUTHP_ADMIN_USER: ${ADMIN_USER}
      AUTHP_ADMIN_EMAIL: "${ADMIN_EMAIL}"
      AUTHP_ADMIN_SECRET: ${ADMIN_PASSWORD}
      JWT_CRYPTO_KEY: ${JWT_CRYPTO_KEY}

volumes:
  # caddy-config:
  caddy-data:
  # caddy-logs:

networks:
  web:
    name: web
    external: true